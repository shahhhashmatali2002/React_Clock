{"version":3,"sources":["Clock.js","App.js","serviceWorker.js","index.js"],"names":["Clock","hourRatio","minuteRatio","secondRatio","console","log","className","style","transform","App","state","setClock","currentDate","Date","getSeconds","getMinutes","getHours","setState","setInterval","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAiCeA,MA/Bf,YAAuD,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,YAKpC,OAHFC,QAAQC,IAAIF,GAKR,yBAAKG,UAAU,SACb,yBAAKA,UAAU,YAAYC,MAAO,CAACC,UAAU,0BAAD,OAAwC,IAAZP,EAA5B,WAC5C,yBAAKK,UAAU,cAAaC,MAAO,CAACC,UAAU,0BAAD,OAA0C,IAAdN,EAA5B,WAC7C,yBAAKI,UAAU,cAAaC,MAAO,CAACC,UAAU,0BAAD,OAA0C,IAAdL,EAA5B,WAE7C,yBAAKG,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,kBAAiB,mCAChC,yBAAKA,UAAU,mBAAkB,oCACjC,yBAAKA,UAAU,mBAAkB,oCACjC,yBAAKA,UAAU,mBAAkB,sCCyB1BG,E,4MAxCZC,MAAQ,CAEPP,YAAa,EACbD,YAAa,EACbD,UAAW,G,EAWZU,SAAW,WAER,IAAMC,EAAc,IAAIC,KACnBV,EAAcS,EAAYE,aAAe,GACzCZ,GAAeC,EAAcS,EAAYG,cAAgB,GAC9BH,EAAYI,WAC5C,EAAKC,SAAS,CAACd,YAAaA,EAAcS,EAAYE,aAAe,KACpE,EAAKG,SAAS,CAACf,YAAaA,GAAeC,EAAcS,EAAYG,cAAgB,KACrF,EAAKE,SAAS,CAAChB,WAAuBC,EAAcU,EAAYI,YAAc,M,kEAd9D,IAAD,OACnBE,aAAY,WACV,EAAKP,aACJ,O,+BAiBK,IAAD,EACwCQ,KAAKT,MAA5CP,EADD,EACCA,YAAaD,EADd,EACcA,YAAaD,EAD3B,EAC2BA,UACjC,OACE,kBAAC,EAAD,CAAOE,YAAaA,EAAaD,YAAaA,EAAaD,UAAWA,Q,GApC1DmB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.50c375e7.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Clock({hourRatio, minuteRatio, secondRatio}) {\n\n  console.log(secondRatio)\n\n\n    return (\n        \n      <div className=\"clock\">\n        <div className=\"hand hour\" style={{transform: `translate(-50%) rotate(${hourRatio * 360}deg)`}}></div>\n        <div className=\"hand minute\"style={{transform: `translate(-50%) rotate(${minuteRatio * 360}deg)`}}  ></div>\n        <div className=\"hand second\"style={{transform: `translate(-50%) rotate(${secondRatio * 360}deg)`}}  ></div>\n        \n        <div className=\"number number1\"><div>1</div></div>\n        <div className=\"number number2\"><div>2</div></div>\n        <div className=\"number number3\"><div>3</div></div>\n        <div className=\"number number4\"><div>4</div></div>\n        <div className=\"number number5\"><div>5</div></div>\n        <div className=\"number number6\"><div>6</div></div>\n        <div className=\"number number7\"><div>7</div></div>\n        <div className=\"number number8\"><div>8</div></div>\n        <div className=\"number number9\"><div>9</div></div>\n        <div className=\"number number10\"><div>10</div></div>\n        <div className=\"number number11\"><div>11</div></div>\n        <div className=\"number number12\"><div>12</div></div>\n    </div>\n    \n    )\n    \n}\n\n\nexport default Clock\n","\nimport React, { Component } from 'react';\n\nimport './App.css';\nimport Clock from './Clock';\n\nclass App extends Component {\n\n  \n\n   state = {\n   \n    secondRatio: 0,\n    minuteRatio: 0,\n    hourRatio: 0\n  }\n  \n \n\n componentDidMount () {\n   setInterval(() => {\n     this.setClock()\n   }, 1000);\n }\n\n   setClock = () =>{\n    \n      const currentDate = new Date;\n       let secondRatio = currentDate.getSeconds() / 60;\n       let minuteRatio = (secondRatio + currentDate.getMinutes()) / 60;\n       let hourRatio = (minuteRatio + currentDate.getHours()) / 12;\n      this.setState({secondRatio: secondRatio = currentDate.getSeconds() / 60}) \n       this.setState({minuteRatio: minuteRatio = (secondRatio + currentDate.getMinutes()) / 60}) \n       this.setState({hourRatio:hourRatio = (minuteRatio + currentDate.getHours()) / 12});\n       \n      \n   }    \n  \n\n  render(){\n    const {secondRatio, minuteRatio, hourRatio} = this.state\n    return (\n      <Clock secondRatio={secondRatio} minuteRatio={minuteRatio} hourRatio={hourRatio}/>\n    );\n  }\n \n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}